Clear-Host

Import-Module SimplySql
Get-Module SimplySql

$myconnection = New-Object MySql.Data.MySqlClient.MySqlConnection
$myconnection.ConnectionString = “server=localhost;user id=root;password=lab2022#mtec;database=dto_keys;pooling=false”

#FUNCAO PARA PEGAR UMA NOVA CHAVE NO BANCO
function getKeyDb {
    
    $primeiraConsulta = Invoke-SqlQuery "SELECT idkey,keycontent FROM general_keys WHERE keystate=0 LIMIT 1;";
    return $primeiraConsulta

}

#FUNCAO QUE MUDA O STATUS DA CHAVE PARA CHAVE EM USO
function setStateUsing {

    Invoke-SqlQuery "UPDATE general_keys SET keystate=1,bancada='b1' WHERE idkey=$idkey;"

}

#FUNCAO QUE MUDA O STATUS DA CHAVE PARA BLOQUEADA
function setStateForBloqued{

    Invoke-SqlQuery "UPDATE general_keys SET keystate=2 WHERE idkey=$idkey;"

}

#FUNCAO QUE MUDA STATUS PARA ATIVADA ATUALIZANDO SERIAL
function setStateForActived{

    Invoke-SqlQuery "UPDATE general_keys SET serialcontent=$serial, keystate=3 WHERE idkey=$idkey;"

}

#RESGATANDO CHAVE DA FUNCAO E SEPARANDO ID E KEY
$vetor = getKeyDb
$idkey = $vetor[0]
$keycont=$vetor[1]
$idkey
$keycont

setStateUsing


<#
#=============================================================*************************************************
function ativation {

Write-Host "------------------TUPINAMPAI------------------" -ForegroundColor DarkYellow`n
##**===========================================================================================================================
## Estrutura de loop para a ativação e tratamento de erros do sistema

:loop
for ($i = 0; $i -ne 1) {
    ##*===============================================
    ## Recebimento da chave do windows
    $chave = 'D8R89-NV4YF-X9KGM-JWKDK-6CQGY'
    ##*===============================================


    ##*===============================================
    #Código de instalação da chave na máquina. 
    $log = cscript slmgr.vbs /ipk $chave 
    ##*===============================================



    ##*====================================================================================
    #Estrutura de condição if que verifica se a chave do windows foi instalado com sucesso.

    if ($log | sls "instalada com êxito."){$i = 1, (Write-Host "Chave válida e instalada com SUCESSO!!!"-ForegroundColor green)}
    else {$i= 0,(Write-Host "Chave inválida Por favor tente novamente..."`n -ForegroundColor red)}
    $log
    ##*====================================================================================



    ##*====================================================================================
    #Estrutura de condição for e if que verifica se a chave do windows ativou o windows com sucesso.

    for ($i = 0; $i -ne 1) {

    #Código de ativação da chave que foi instalada na máquina. 
    $log = cscript slmgr.vbs /ato 
  
    if ($log | sls "Produto ativado com êxito."){$i = 1, (Write-Host "Máquina Ativada com SUCESSO!!!"-ForegroundColor green)} 
    else {Write-Host "Chave Bloqueada Por favor tente novamente..."`n -ForegroundColor red
    break :loop}
    $log
    ##*====================================================================================
$log = cscript slmgr.vbs /dli
if ($log | sls "Licenciado"){Write-Host "Licenciado com SUCESSO!!!"-ForegroundColor green} else {"Derrota"}
$log
}

}
}

function serial {
    
    for ($i = 0; $i -ne 1) {
    $array = @(wmic bios get serialnumber)
    $array[2] | Set-Clipboard
    $bancoS = $array[2]
    Write-Host 
    if ($array[2] -eq $bancoS){$i = 1}  
        if ($array[2] -eq $bancoS){Write-Host "Serial inserido no banco de dados com SUCESSO!!!"-ForegroundColor green}  
    else {$i= 0} 
        if ($array[2] -ne $bancoS){Write-Host "ERRO[404] Serial inválido, Por favor tente novamente..."`n -ForegroundColor red }
  
}
    
}
ativation
serial


#Remove-Item C:\Windows\System32\tupinampai.ps1
#Set-ExecutionPolicy Restricted
#>
